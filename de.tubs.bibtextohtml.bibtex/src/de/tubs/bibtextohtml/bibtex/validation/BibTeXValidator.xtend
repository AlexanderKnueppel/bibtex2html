/*
 * generated by Xtext
 */
package de.tubs.bibtextohtml.bibtex.validation

import org.eclipse.xtext.validation.Check
import de.tubs.bibtextohtml.bibtex.bibTeX.UnknownField
import de.tubs.bibtextohtml.bibtex.bibTeX.BibTeXPackage
import de.tubs.bibtextohtml.bibtex.bibTeX.Article
import de.tubs.bibtextohtml.bibtex.bibTeX.AuthorField
import de.tubs.bibtextohtml.bibtex.bibTeX.TitleField
import de.tubs.bibtextohtml.bibtex.bibTeX.JournalField
import de.tubs.bibtextohtml.bibtex.bibTeX.YearField
import de.tubs.bibtextohtml.bibtex.bibTeX.VolumeField
import de.tubs.bibtextohtml.bibtex.bibTeX.NumberField
import de.tubs.bibtextohtml.bibtex.bibTeX.NoteField
import de.tubs.bibtextohtml.bibtex.bibTeX.MonthField
import de.tubs.bibtextohtml.bibtex.bibTeX.PagesField

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class BibTeXValidator extends AbstractBibTeXValidator {

	//  public static val INVALID_NAME = 'invalidName'
	//
	//	@Check
	//	def checkGreetingStartsWithCapital(Greeting greeting) {
	//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
	//			warning('Name should start with a capital', 
	//					MyDslPackage.Literals.GREETING__NAME,
	//					INVALID_NAME)
	//		}
	//	}
	public static val UNKNOWN_FIELD = 'UnknownField'
	public static val TITLE_FIELD = 'TitleField'

	@Check
	def checkForUnknowns(UnknownField unknown) {
		warning(
			'Field "' + unknown.getType().getType() + '" is unknown or not implemented yet. Hence it will be ignored.',
			BibTeXPackage.Literals.UNKNOWN_FIELD__TYPE, UNKNOWN_FIELD)
	}

	//Map for the mandatory fields of an article
	public static val articleMapMandatory = newHashMap('Author' -> AuthorField, 'Title' -> TitleField,
		'Journal' -> JournalField, 'Year' -> YearField)
	//Map for the otpional fields of an article	
	public static val articleMapOptional = newHashMap('Volume' -> VolumeField, 'Number' -> NumberField,
		'Pages' -> PagesField, 'Month' -> MonthField, 'Note' -> NoteField)

	@Check
	def checkForMultipleOccurence(Article article) {
		articleMapMandatory.forEach [ str, field |
			if (article.elements.filter(field).size > 1) {
				warning(str + " is duplicated! Just one allowed!", BibTeXPackage.Literals.ARTICLE__ELEMENTS)
			} else if (article.elements.filter(field).size == 0) {
				error(str + " is missing!", BibTeXPackage.Literals.ARTICLE__ELEMENTS)
			}
		]

		articleMapOptional.forEach [ str, field |
			if (article.elements.filter(field).size > 1) {
				warning(str + " is duplicated! Just one allowed!", BibTeXPackage.Literals.ARTICLE__ELEMENTS)
			}
		]
	}
}
