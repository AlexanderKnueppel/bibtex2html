/*
 * generated by Xtext
 */
package de.tubs.bibtextohtml.htmlgenerator.generator

import de.tubs.bibtextohtml.htmlgenerator.hTMLGenerator.RunModule

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.core.resources.IFile
import org.eclipse.core.resources.ResourcesPlugin
import java.net.URI
import de.tubs.bibtextohtml.htmlgenerator.hTMLGenerator.PrefixOption
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import de.tubs.bibtextohtml.htmlgenerator.hTMLGenerator.Import
import de.tubs.bibtextohtml.htmlgenerator.hTMLGenerator.Styles

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class HTMLGeneratorGenerator implements IGenerator {
	def compile(RunModule module) '''
		«var pre = (module.getModule().elements.filter(typeof(PrefixOption)).get(0) as PrefixOption).prefix»
		<!DOCTYPE html>
		<html>
		<head>
			<style>
			«FOR styles :module.getModule().eAllContents().toIterable().filter(typeof(Styles))»
		      «styles.printStyles(pre)»
		    «ENDFOR»
			</style>
		<meta charset="UTF-8">
		<title>«(module.getModule().elements.filter(typeof(Import)).get(0) as Import).importBibtex»</title>
		</head>
		
		<body>
		«FOR imp :module.getModule().eAllContents().toIterable().filter(typeof(Import))»
	      «imp.compile»
	    «ENDFOR»
		</body>
		
		</html>
		
	'''
	def compile(Import imp) '''
	  «imp.importBibtex»
	'''
	
	def printStyles(Styles styles, String pre) '''
		.«pre»«styles.attributeType» {
			font-style: «styles.fontStyle.getName()»;
			font-color: «styles.fontColor»;
			font-type: «styles.fontType»;
		}
	'''
	//public HTMLGeneratorGenerator() {}
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
//		val BibParser parser = new BibParser;
//		//val List<String> modulesToRun = new ArrayList<String>();
//		//val HTMLGeneratorModel model = resource.getContents().get(0) as HTMLGeneratorModel;
//		System.out.println("hallo");
		System.out.println("Working Directory = " + System.getProperty("user.dir"));

      	val String platformString = resource.getURI().toPlatformString(true);
  		System.out.println(platformString);

//      val uri = new URI(platformString);
//      System.out.println(resource.getURI().path());
//      String platformString = resource.getURI().toPlatformString(true);
//		val IFile[] myFile = ResourcesPlugin.getWorkspace().getRoot().findFilesForLocationURI(new URI(platformString));
//		myFile.get(0).
//        val String path = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(platformString)).getRawLocation().toString();

		for(RunModule module: resource.getAllContents().toIterable().filter(typeof(RunModule))) {
			System.out.println(module.getModule().getName());
//			val String bibtexEntries = "";
//			for(Import imp : module.getModule().eAllContents().toIterable().filter(typeof(Import))) {
//				if(!imp.isImportAll()) {
//  					bibtexEntries.concat(
//  						new String(
//  							Files.readAllBytes(
//  								Paths.get(imp.getImportBibtex())
//  							), 
//  							Charset.defaultCharset()
//  						)
//  					);
//				} else {
//					// import everything from directory
//				}
//			}
//			System.out.println(bibtexEntries);
			
//			
//			val Model bibtexModel = parser.parse(new StringInputStream(bibtexEntries)) as Model;
//			
//			for(BibtexEntryTypes be : bibtexModel.getBibtexEntries()) {
//				System.out.println(be.getKey().getKey());
//			}
			try {
				fsa.generateFile(
				module.getModule().getName() + ".txt", // class name
				module.compile)
			} catch(NullPointerException e) {
				System.out.println(e.getMessage());
			}
	
			}
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
//new org.eclipse.emf.mwe.utils.StandaloneSetup().setPlatformUri("../");
//Injector injector = new BibTeXStandaloneSetup().createInjectorAndDoEMFRegistration();
//XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet.class);
//resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);
//Resource resource = resourceSet.getResource(
//    URI.createURI("platform:/resource/org.xtext.example.mydsl/src/example.mydsl"), true);
//Model model = (Model) resource.getContents().get(0);
//fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
//	BibTeXParser parser;
//	Model model = (Model) resource.getContents().get(0);
	}
}
