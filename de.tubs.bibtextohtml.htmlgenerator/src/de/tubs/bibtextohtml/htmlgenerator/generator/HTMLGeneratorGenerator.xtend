/*
 * generated by Xtext
 */
package de.tubs.bibtextohtml.htmlgenerator.generator

import de.tubs.bibtextohtml.htmlgenerator.hTMLGenerator.RunModule

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.core.resources.IFile
import org.eclipse.core.resources.ResourcesPlugin
import java.net.URI
import de.tubs.bibtextohtml.htmlgenerator.hTMLGenerator.PrefixOption
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import de.tubs.bibtextohtml.htmlgenerator.hTMLGenerator.Import
import de.tubs.bibtextohtml.htmlgenerator.hTMLGenerator.Styles
import org.eclipse.core.resources.IProject
import org.eclipse.core.resources.IFolder
import org.eclipse.core.runtime.Path
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.charset.Charset
import java.io.FileNotFoundException
import de.tubs.bibtextohtml.bibtex.bibTeX.Model
import de.tubs.bibtextohtml.bibtex.BibParser
import org.eclipse.xtext.util.StringInputStream
import de.tubs.bibtextohtml.bibtex.bibTeX.BibtexEntryTypes
import java.io.InputStream
import java.io.InputStreamReader
import de.tubs.bibtextohtml.bibtex.BibTeXStandaloneSetup
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.resource.XtextResource
import com.google.inject.Guice
import de.tubs.bibtextohtml.bibtex.BibTeXRuntimeModule
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.resource.ResourceSet

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class HTMLGeneratorGenerator implements IGenerator {
	def compile(RunModule module, Model _bibRes) '''
		«var pre = (module.getModule().elements.filter(typeof(PrefixOption)).get(0) as PrefixOption).prefix»
		<!DOCTYPE html>
		<html>
		<head>
			<style>
			«FOR styles :module.getModule().eAllContents().toIterable().filter(typeof(Styles))»
		      «styles.printStyles(pre)»
		    «ENDFOR»
			</style>
		<meta charset="UTF-8">
		<title>«(module.getModule().elements.filter(typeof(Import)).get(0) as Import).importBibtex»</title>
		</head>
		
		<body>
		«FOR BibtexEntryTypes be : _bibRes.bibtexEntries»
			«be.printplain(pre)»
		«ENDFOR»
		</body>
		
		</html>
		
	'''
	def compile(Import imp) '''
	  «imp.importBibtex»
	'''
	
	def printStyles(Styles styles, String pre) '''
		.«pre»«IF !styles.isWildcard»«styles.attributeType»«ELSEIF styles.wildcard»*«ENDIF» {
			font-style: «styles.fontStyle.getName()»;
			font-color: «styles.fontColor»;
			font-type: «styles.fontType»;
		}
	'''
	
	// Different templates to print entries
	def printplain(BibtexEntryTypes entries, String pre) '''
		<span class="«pre»author">«entries»</span>
	'''
	//public HTMLGeneratorGenerator() {}
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		//val BibParser parser = new BibParser;
//		//val List<String> modulesToRun = new ArrayList<String>();
//		//val HTMLGeneratorModel model = resource.getContents().get(0) as HTMLGeneratorModel;

      	val foldername = "/" + String.join("/", resource.getURI().segmentsList().subList(1, resource.getURI().segmentCount()-1))

  		val IFolder folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(foldername));//getFigetProject(proj_name);
  		val String resLocation = folder.getRawLocation().toOSString();
  		
  		// Parse BibTeX-Model
  		//val injector = new BibTeXStandaloneSetup().createInjectorAndDoEMFRegistration
//  		val injector = Guice.createInjector(new BibTeXRuntimeModule())
//		val resourceSet = injector.getInstance(typeof(XtextResourceSet))
		val ResourceSet resourceSet = new ResourceSetImpl();
		//XtextResourceSet.
		//resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);
		
		for(RunModule module: resource.getAllContents().toIterable().filter(typeof(RunModule))) {
			System.out.println(module.getModule().getName());
			var String bibtexEntries = "";
			for(Import imp : module.getModule().eAllContents().toIterable().filter(typeof(Import))) {
				if(!imp.isImportAll()) { //import all doesn't make any sense or does it?
					try {
						val byte[] data = Files.readAllBytes( Paths.get(resLocation, imp.getImportBibtex()));
						val String n = new String(
	  							data, 
	  							Charset.defaultCharset()
	  						)
						bibtexEntries += n;
					} catch(FileNotFoundException e) {
						System.out.println("File not found: " + e.getMessage());
					} catch(Exception e) {
						System.out.println("Exception: " + e.getMessage());
					}
				} else {
					// import everything from directory
				}
			}		
			val bibRes = resourceSet.createResource(org.eclipse.emf.common.util.URI.createURI("dummy:/inmemory.bib"))
		    bibRes.load(new StringInputStream(bibtexEntries), resourceSet.getLoadOptions())
			//bibRes.
			try {
				val Model bibtexModel = bibRes.contents.get(0) as Model	
				for(BibtexEntryTypes be : bibtexModel.getBibtexEntries()) {
					System.out.println(be.getKey().getKey());
				}
				
				//print output to file
				fsa.generateFile(
				module.getModule().getName() + ".txt", // class name
				module.compile(bibtexModel))
			} catch(Exception e) {
				System.out.println(e.getMessage());
				//do nothing
			}

	
			}
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
//new org.eclipse.emf.mwe.utils.StandaloneSetup().setPlatformUri("../");
//Injector injector = new BibTeXStandaloneSetup().createInjectorAndDoEMFRegistration();
//XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet.class);
//resourceSet.addLoadOption(XtextResource.OPTION_RESOLVE_ALL, Boolean.TRUE);
//Resource resource = resourceSet.getResource(
//    URI.createURI("platform:/resource/org.xtext.example.mydsl/src/example.mydsl"), true);
//Model model = (Model) resource.getContents().get(0);
//fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
//	BibTeXParser parser;
//	Model model = (Model) resource.getContents().get(0);
	}
}
