/*
* generated by Xtext
*/
package de.tubs.bibtextohtml.bibtex.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.tubs.bibtextohtml.bibtex.services.BibTeXGrammarAccess;

public class BibTeXParser extends AbstractContentAssistParser {
	
	@Inject
	private BibTeXGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.tubs.bibtextohtml.bibtex.ui.contentassist.antlr.internal.InternalBibTeXParser createParser() {
		de.tubs.bibtextohtml.bibtex.ui.contentassist.antlr.internal.InternalBibTeXParser result = new de.tubs.bibtextohtml.bibtex.ui.contentassist.antlr.internal.InternalBibTeXParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getArticleAccess().getAlternatives_0_1(), "rule__Article__Alternatives_0_1");
					put(grammarAccess.getAuthorFieldAccess().getAlternatives_1(), "rule__AuthorField__Alternatives_1");
					put(grammarAccess.getFullnameAccess().getAlternatives(), "rule__Fullname__Alternatives");
					put(grammarAccess.getArticleAccess().getGroup_0(), "rule__Article__Group_0__0");
					put(grammarAccess.getArticleAccess().getGroup_0_4(), "rule__Article__Group_0_4__0");
					put(grammarAccess.getArticleAccess().getGroup_1(), "rule__Article__Group_1__0");
					put(grammarAccess.getArticleAccess().getGroup_2(), "rule__Article__Group_2__0");
					put(grammarAccess.getArticleAccess().getGroup_3(), "rule__Article__Group_3__0");
					put(grammarAccess.getArticleAccess().getGroup_4(), "rule__Article__Group_4__0");
					put(grammarAccess.getArticleAccess().getGroup_5(), "rule__Article__Group_5__0");
					put(grammarAccess.getArticleAccess().getGroup_6(), "rule__Article__Group_6__0");
					put(grammarAccess.getArticleAccess().getGroup_7(), "rule__Article__Group_7__0");
					put(grammarAccess.getArticleAccess().getGroup_8(), "rule__Article__Group_8__0");
					put(grammarAccess.getArticleAccess().getGroup_8_0(), "rule__Article__Group_8_0__0");
					put(grammarAccess.getAuthorFieldAccess().getGroup(), "rule__AuthorField__Group__0");
					put(grammarAccess.getAuthorFieldAccess().getGroup_1_0(), "rule__AuthorField__Group_1_0__0");
					put(grammarAccess.getAuthorFieldAccess().getGroup_1_1(), "rule__AuthorField__Group_1_1__0");
					put(grammarAccess.getAuthorsAccess().getGroup(), "rule__Authors__Group__0");
					put(grammarAccess.getAuthorsAccess().getGroup_1(), "rule__Authors__Group_1__0");
					put(grammarAccess.getFullnameAccess().getGroup_0(), "rule__Fullname__Group_0__0");
					put(grammarAccess.getFullnameAccess().getGroup_1(), "rule__Fullname__Group_1__0");
					put(grammarAccess.getTitleFieldAccess().getGroup(), "rule__TitleField__Group__0");
					put(grammarAccess.getJournalFieldAccess().getGroup(), "rule__JournalField__Group__0");
					put(grammarAccess.getYearFieldAccess().getGroup(), "rule__YearField__Group__0");
					put(grammarAccess.getVolumeFieldAccess().getGroup(), "rule__VolumeField__Group__0");
					put(grammarAccess.getNumberFieldAccess().getGroup(), "rule__NumberField__Group__0");
					put(grammarAccess.getPagesFieldAccess().getGroup(), "rule__PagesField__Group__0");
					put(grammarAccess.getMonthFieldAccess().getGroup(), "rule__MonthField__Group__0");
					put(grammarAccess.getNoteFieldAccess().getGroup(), "rule__NoteField__Group__0");
					put(grammarAccess.getModelAccess().getBibtexEntriesAssignment(), "rule__Model__BibtexEntriesAssignment");
					put(grammarAccess.getArticleAccess().getKeyAssignment_0_3(), "rule__Article__KeyAssignment_0_3");
					put(grammarAccess.getArticleAccess().getAuthorAssignment_0_4_1(), "rule__Article__AuthorAssignment_0_4_1");
					put(grammarAccess.getArticleAccess().getTitleAssignment_1_1(), "rule__Article__TitleAssignment_1_1");
					put(grammarAccess.getArticleAccess().getJournalAssignment_2_1(), "rule__Article__JournalAssignment_2_1");
					put(grammarAccess.getArticleAccess().getYearAssignment_3_1(), "rule__Article__YearAssignment_3_1");
					put(grammarAccess.getArticleAccess().getVolumeAssignment_4_1(), "rule__Article__VolumeAssignment_4_1");
					put(grammarAccess.getArticleAccess().getNumberAssignment_5_1(), "rule__Article__NumberAssignment_5_1");
					put(grammarAccess.getArticleAccess().getPagesAssignment_6_1(), "rule__Article__PagesAssignment_6_1");
					put(grammarAccess.getArticleAccess().getMonthAssignment_7_1(), "rule__Article__MonthAssignment_7_1");
					put(grammarAccess.getArticleAccess().getNoteAssignment_8_0_1(), "rule__Article__NoteAssignment_8_0_1");
					put(grammarAccess.getCiteKeyAccess().getKeyAssignment(), "rule__CiteKey__KeyAssignment");
					put(grammarAccess.getAuthorsAccess().getNamesAssignment_0(), "rule__Authors__NamesAssignment_0");
					put(grammarAccess.getAuthorsAccess().getNamesAssignment_1_1(), "rule__Authors__NamesAssignment_1_1");
					put(grammarAccess.getFullnameAccess().getLastnameAssignment_0_0(), "rule__Fullname__LastnameAssignment_0_0");
					put(grammarAccess.getFullnameAccess().getFirstnameAssignment_0_2(), "rule__Fullname__FirstnameAssignment_0_2");
					put(grammarAccess.getFullnameAccess().getFirstnameAssignment_1_0(), "rule__Fullname__FirstnameAssignment_1_0");
					put(grammarAccess.getFullnameAccess().getLastnameAssignment_1_1(), "rule__Fullname__LastnameAssignment_1_1");
					put(grammarAccess.getFullnameAccess().getFirstnameAssignment_2(), "rule__Fullname__FirstnameAssignment_2");
					put(grammarAccess.getTitleFieldAccess().getTitleAssignment_1(), "rule__TitleField__TitleAssignment_1");
					put(grammarAccess.getJournalFieldAccess().getJournalAssignment_1(), "rule__JournalField__JournalAssignment_1");
					put(grammarAccess.getYearFieldAccess().getYearAssignment_1(), "rule__YearField__YearAssignment_1");
					put(grammarAccess.getVolumeFieldAccess().getVolumeAssignment_1(), "rule__VolumeField__VolumeAssignment_1");
					put(grammarAccess.getNumberFieldAccess().getNumberAssignment_1(), "rule__NumberField__NumberAssignment_1");
					put(grammarAccess.getPagesFieldAccess().getPagesAssignment_1(), "rule__PagesField__PagesAssignment_1");
					put(grammarAccess.getMonthFieldAccess().getMonthAssignment_1(), "rule__MonthField__MonthAssignment_1");
					put(grammarAccess.getNoteFieldAccess().getNoteAssignment_1(), "rule__NoteField__NoteAssignment_1");
					put(grammarAccess.getArticleAccess().getUnorderedGroup(), "rule__Article__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.tubs.bibtextohtml.bibtex.ui.contentassist.antlr.internal.InternalBibTeXParser typedParser = (de.tubs.bibtextohtml.bibtex.ui.contentassist.antlr.internal.InternalBibTeXParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BibTeXGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BibTeXGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
